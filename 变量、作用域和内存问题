·理解基本类型和引用类型的值
·理解执行环境
·理解垃圾收集

1.1基本类型和引用类型的值
  ECMAScipt变量可能由两种不同数据类型的值：基本类型值和引用类型值。基本类型指的是简单的数据段；而引用类型值那些可能有多个值构成的对象。
  在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。接下来会介绍两种方法来确认值的类型。
  (已知，7种数据类型：Undefined,Null,Boolean,Number,String,Bigint,Symbol;)
  基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，
也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的。
1.1.1动态的属性
  定义基本类型值和引用类型值的方式是类似的：创建一个变量并为该变量赋值。但是，当这个值保存到变量中以后，对不同类型值可以执行的操作则大相径庭。
  对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法。
  但是我们不能给基本类型的值添加属性，尽管这样做不会导致任何错误。
1.1.2复制变量值
  除了保存的方式不同之外，从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同。
  如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到位新变量分配的位置上。这两个变量可以参加任何操作都不会相互影响，
  当从一个变量向另一个变量复制引用类型的值时，同时也会将存储在变量对象中的值复制一份放到位新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而
这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。
1.1.3传递参数
1.1.4检测类型
  typeof确认一个值是哪种基本类型；instanceof确认一个值是哪种引用类型。
  如 var s="Feibaoooh"
     alert(typeof s);   //string
  如 alert(person instanceof Object);    //变量person是Object吗？
     alert(colors instanceof Array);    //变量colors是Array吗？
  typeof 如果变量的值是一个对象或null，则返回object。
  因为所有引用类型的值都是Object的实例，所以在检测一个引用类型值和Object构造函数时，instanceof操作符始终会返回true.
  如果使用instanceof操作符检测基本类型值，则会返回false，因为基本类型不是对象。
1.2执行环境及作用域

1.2.1延长作用域链
1.2.2没有块级作用域
1.3垃圾收集
1.3.1标记清除
1.3.2引用计数
1.3.3性能问题
1.3.4管理内存
1.4总结
  

·理解基本类型和引用类型的值
·理解执行环境
·理解垃圾收集

1.1基本类型和引用类型的值
  ECMAScipt变量可能由两种不同数据类型的值：基本类型值和引用类型值。基本类型指的是简单的数据段；而引用类型值那些可能有多个值构成的对象。
  在将一个值赋给变量时，解析器必须确定这个值是基本类型值还是引用类型值。接下来会介绍两种方法来确认值的类型。
  (已知，7种数据类型：Undefined,Null,Boolean,Number,String,Bigint,Symbol;)
  基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，
也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。为此，引用类型的值是按引用访问的。
1.1.1动态的属性
  定义基本类型值和引用类型值的方式是类似的：创建一个变量并为该变量赋值。但是，当这个值保存到变量中以后，对不同类型值可以执行的操作则大相径庭。
  对于引用类型的值，我们可以为其添加属性和方法，也可以改变和删除其属性和方法。
  但是我们不能给基本类型的值添加属性，尽管这样做不会导致任何错误。
1.1.2复制变量值
  除了保存的方式不同之外，从一个变量向另一个变量复制基本类型值和引用类型值时，也存在不同。
  如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到位新变量分配的位置上。这两个变量可以参加任何操作都不会相互影响，
  当从一个变量向另一个变量复制引用类型的值时，同时也会将存储在变量对象中的值复制一份放到位新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而
这个指针指向存储在堆中的一个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另一个变量。
1.1.3传递参数
1.1.4检测类型
  typeof确认一个值是哪种基本类型；instanceof确认一个值是哪种引用类型。
  如 var s="Feibaoooh"
     alert(typeof s);   //string
  如 alert(person instanceof Object);    //变量person是Object吗？
     alert(colors instanceof Array);    //变量colors是Array吗？
  typeof 如果变量的值是一个对象或null，则返回object。
  因为所有引用类型的值都是Object的实例，所以在检测一个引用类型值和Object构造函数时，instanceof操作符始终会返回true.
  如果使用instanceof操作符检测基本类型值，则会返回false，因为基本类型不是对象。
1.2执行环境及作用域

1.2.1延长作用域链
1.2.2没有块级作用域
1.3垃圾收集
1.3.1标记清除
1.3.2引用计数
1.3.3性能问题
1.3.4管理内存
1.4总结
  JavaSript变量可以用来保存两种类型的值：基本类型值和引用类型值。基本类型的值源自以下5种基本数据类型：Undefined,Null,Boolean,Number,String,Bigint,
Symbol.基本类型值和引用类型值具有以下特点：
  ·基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中；
  ·从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本；
  ·引用类型的值是对象，保存在堆内存中；
  ·包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针；
  ·从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向一个对象；
  ·确定一个值是那种基本类型可以使用typeof操作符，而确定一个值是哪种引用类型可以用instanceof操作符；
所有变量(包括基本类型和引用类型)都存在于一个执行环境（也称为作用域），当中，这个执行那个环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。以下是关
于执行环境的几点总结：
  ·执行环境有全局执行环境（也称为全局环境）和函数执行环境之分；
  ·每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链；
  ·函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含（父）环境，乃至全局环境；
  ·全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据；
  ·变量的执行环境有助于确定应该何时释放内存；
JavaScript是一门具有自动垃圾收集机制的编程语言，开发人员不必关系内存分配和回收问题。可以对JavaScript的垃圾收集例程作如下总结：
  ·离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除；
  ·“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然后再回收其内存；
  ·另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript引擎目前都不再使用这种算法；但在IE中访问非原生JavaScript对
象（如DOM元素）时，这种算法仍然可能会导致问题；
  ·当代码中存在循环引用现象时，“引用计数”算法就会导致问题；
  ·解释变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回收内存，应该及时解除不再使用的全局对象，全局对象属性以及循环引用变
量的引用。
  

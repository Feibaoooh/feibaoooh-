·使用对象
·创建并操作数组
·理解基本的JavaScript类型
·使用基本类型和基本包装类型


2.1 Object类型
  常见且在ECMAScript中使用得最多。虽然Object的实例不具备多少功能，但对于应用程序中存储和传输数据而言，它们确实是非常理想的选择；
  创建Object实例有两种方式：
  ·使用new操作符后跟Object构造函数；
  如var person=new Object();
  person.name="Feibaoooh";
  person.age=20;
  ·使用对象字面量表示法；（对象字面量是对象定义的一种简写方式，目的在于简化创建包含大量属性的对象的过程。）
  如var person={
        name:"Feibaoooh",
        age:20
    };
  访问对象属性有两种方法：点表示法和方括号表示法；
  如alert(person.name);    //"Feibaoooh"
  alert(person["name"]);   //"Feibaoooh"
  从功能上看，这两种访问对象属性的方法没有任何区别。但方括号语法的主要优点是可以通过变量来访问属性。
  如var propertyName="name";
  alert(person[propertyName]);    //"Feibaoooh"
  如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法。
  如person["first name"]="Feibaoooh";
  由于first name中包含一个空格，所以不能使用点表示法来访问它。然鹅，属性名是可以包含非字母非数字的，这时候就可以使用方括号表示法来访问它们、
  通常，除非必须使用变量来访问属性，否则我们建议使用点表示法。
2.2 Array类型
  Array是次之object的常用类型。虽然ECMAScript与其他语言中的数组都是数据的有序列表，但与其他语言不同的是，ECMAScript数组的每一项都可以保存任何类型的
数据。而且，ECMAScript数组的大小是可以动态调整的，即可以随着数据的添加自动增长以容纳新增数据。
  创建数组的基本方式有两种。
  ·第一种是使用Array构造函数。
  如var colors=new Array();
  `如果提前知道数组要保存的项目数量,比如20：
  var colors=new Array(20);
  `也可以向Array构造函数传递数组中应该包含的项：
  var colors=new Array("red","blue","green");
  给构造函数传递一个值也可以创建数组。如果传递的是数值，则会创建给定数值项数的数值；而如果传递的是其他类型的参数，则会创建只包含那个值的数组。
  如 var colors=new Array(3);    创建一个包含3项的数组；
  var names=new Array("Greg");    创建一个包含一项，即字符串“Greg”的数组；
  `可以省略new操作符：
  var colors=Array();
  第二种是使用数组字面量表示法。数组字面量由一对包含数组项的方括号表示，多个数组项之间以逗号隔开。
  如 var colors=["red","blue","green"];    //创建一个包含3个字符串的数组；
  var names=[];                            //创建一个空数组；
  var values=[1,2,];                       //不要这样！这样会创建一个包含2或3项的数组；
  var option=[,,,,];                       //不要这样！这样会创建一个包含5或6项的数组；
2.2.1 检测数组
  自从ECMAScript3做出规定以后，就出现了确定某个对象是不是数组的经典问题。对于一个网页或者一个全局作用域而言，使用instanceof操作符就能得到满意的结果：
if (value instanceof Array){
//对数组执行某些操作
}
  instanceof操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的
Array构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。
  为了解决这个问题，ECMAScript5新增了Array.isArray()方法。这个方法的目的是最终确定这个值到底是不是数组，而不管它是在哪个全局执行环境中创建的。
  如 if(Array.isArray(value)){
        //对数组执行某些操作
     }
   支持Array.isArray()方法的浏览器有IE9+,Firefox 4+,Safari 5+,Opera 10.5+和Chrome。
2.2.2 转换方法
  如前所述，所有对象都具有toLocaleString(),toString()和valueof()方法。其中，调用数组的toString()方法会返回由数组中每个值的字符串形式拼接而成的一个
以逗号分隔的字符串。而调用valueof()返回的还是数组。实际上，为了创建这个字符串会调用数组每一项的toString()方法。
  如var colors=["red","blue","green"];   //创建一个包含3个
  alert(colors.toString());              //red,blue,green
  alert(colors.valueof());               //red,blue,green
  alert(colors);                         //red,blue,green
使用join()方法，则可以使用不同的分隔符来构建这个字符串。
如var colors=["red","green","blue"];   
alert(colors.join(","));                //red,green.blue
alert(colors.join("||"))；              //red||green||blue
2.2.3 栈方法
  ECMAScript数组也提供了一种让数组的行为类似于其他数据结构的方法。具体来说，数组可以表现得就像栈一样，后者是一种可以限制插入和删除项的数据结构。
  栈是一种LIFO(Last-In-First-Out,后进先出)的数据结构，也就是最新添加的项最早被移除。
  而栈中项的插入（叫做推入）和移除（叫做弹出），只发生在一个位置--栈的顶部。ECMAScript为数组专门提供了push()和pop()方法，以便实现类似栈的行为。
  push()方法可以接受任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。
  pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。
2.2.4 队列方法
  栈数据结构的访问规则是LIFO（后进先出），而队列数据结构的访问规则是FIFO（First-In-First-Out,先进先出）。队列在列表的末端添加项，从列表的前端移除项，
由于push()是向数组末端添加项的方法，因此要模拟队列只需一个从数组前端取得项的方法。实现这一操作的数组方法就是shift(),它能够移除数组中的第一个项并返回
该项，同时将数组长度减1.结合使用shift()和push()方法，可以像使用队列一样使用数组。
  ECMAScript还为数组提供了一个unshift()方法。顾名思义，unshift()与shift()的用途相反：它能在数组前端添加任意个项并返回新数组的长度。因此，同时使用
unshift()和pop()方法，可以从相反方向来模拟队列，即在数组的前端添加项，从数组末端移除项。
2.2.5 重排序方法
  数组中已经存在两个可以直接用来重排序的方法：reverse()和sort().
  reverse()会直接反转数组项的顺序。
  如var values=[1,2,3,4,5];
  values.reverse();
  alert(values);    //5,4,3,2,1
  sort()单独使用，会根据测试字符串的结果改变原来的顺序
  如var values=[0,1,5,10,15];
  values.sort();
  alert(values);    //0,1,10,15,5
  因此sort()方法可以接收一个比较函数作为参数，以便我们制定哪个值位于哪个值的前面。
  function compare(value1,value2){
    if(value1<value2){
      return -1;
    } else if(value1>value2){
      return 1;
    }else {
      return 0;
    }
  }
  这个比较函数可以适用于大多数数据类型，只要将其作为参数传递给sort()方法即可。
  var values=[0,1,5,10,15];
  values.sort(compare);
  alert(values);    //0,1,5,10,15
  降序排序
  function compare(value1,value2){
    if(value1<value2){
      return 1;
    } else if(value1>value2){
      return -1;
    }else {
      return 0;
    }
  }
  var values=[0,1,5,10,15];
  values.sort(compare);
  alert(values);      //15,10,5,1,0
  对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以使用一个更简单的比较函数。这个函数只要用第二个值减第一个值即可。
  function compare(value1,value2){
        return value2 - value1;
   }
2.2.6 操作方法
  ECMAScript为操作已经包含在数组中的项提供了很多方法。其中，concat()方法可以基于当前数组中的所有项创建一个新数组。
2.2.7位置方法
2.2.8 迭代方法
2.2.9 归并方法
2.3 Date类型
2.3.1 继承的方法
2.3.2 日期格式化方法
2.3.3日期/时间组件方法
2.4 RegExp类型
2.4.1 RegExp实例属性
2.4.2 RegExp实例方法
2.4.3 RegExp构造函数属性
2.4.4 模式的局限性
2.5 Function类型
2.5.1 没有重载（深入理解）
2.5.2 函数声明与函数表达式
2.5.3作为值的函数
2.5.4函数内部属性
2.5.5函数属性和方法
2.6 基本包装类型
2.6.1 Boolean类型
2.6.2 Number类型
2.6.3 String类型
2.7 单体内置对象
2.7.1 Global对象
2.7.2 Math对象
2.8 总结
